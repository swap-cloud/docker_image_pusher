name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Tag Images
    runs-on: ubuntu-latest
    steps:
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      
      # 增加可用磁盘空间
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          build-mount-path: '/var/lib/docker/'

      - name: Restart docker
        run: sudo service docker restart

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to Aliyun
        run: |
          set -x
          docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

          # 读取 images.txt 文件并处理每个镜像
          while IFS= read -r line || [ -n "$line" ]; do
              # 忽略空行与注释
              [[ -z "$line" ]] && continue
              if echo "$line" | grep -q '^\s*#'; then
                  continue
              fi

              # 获取镜像的完整名称，例如hangzhou.cri.aliyun.com/xxxx/ssss:v2
              image=$(echo "$line" | awk '{print $NF}')
              # 将@sha256:等字符删除
              image="${image%%@*}"
              echo "image: $image"
          
              # 将冒号和斜杠替换为中划线
              new_image_tag=$(echo "$image" | sed 's/\//-/g' | sed 's/:/-/g')
          
              # 生成新的镜像地址
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/image-proxy:$new_image_tag"
          
          
              # 检查镜像地址是否包含仓库域名
              if [[ "$new_image" != *"/"* ]]; then
                # 如果没有仓库域名，默认使用 Docker 官方仓库域名 docker.io
                new_image="docker.io/$new_image"
              fi
              
              # 提取仓库域名、镜像名称和标签
              registry=$(echo "$new_image" | cut -d'/' -f1)       # 获取仓库域名
              repo_name=$(echo "$new_image" | cut -d'/' -f2-3 | cut -d':' -f1)  # 获取镜像仓库名
              tag=$(echo "$new_image" | cut -d':' -f2)             # 获取镜像标签
              
              # 如果没有标签，则默认使用 'latest'
              tag=${tag:-latest}
              
              # 构造请求的 URL
              url="https://$registry/v2/$repo_name/manifests/$tag"
              
              # 使用 curl 请求镜像 manifest，-s 使 curl 静默工作，-o /dev/null 不输出内容，-w "%{http_code}" 获取 HTTP 响应码
              response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              
              if [ "$response" -eq 200 ]; then
                echo "镜像 $image 已经存在，跳过拉取和推送操作"
              else
                echo "镜像不存在时，执行拉取、打标签和推送操作"
                echo "docker pull $image"
                docker pull $image
          
                echo "docker tag $image $new_image"
                docker tag $image $new_image
          
                echo "docker push $new_image"
                docker push $new_image
                echo "开始清理磁盘空间"
                echo "=============================================================================="
                df -hT
                echo "=============================================================================="
                docker rmi $image
                docker rmi $new_image
                echo "磁盘空间清理完毕"
                echo "=============================================================================="
                df -hT
                echo "=============================================================================="     
              fi

          done < images.txt
